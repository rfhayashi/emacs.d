#+title: Emacs Config
#+author: Rui Hayashi
#+PROPERTY: header-args :results silent :tangle config.el :mkdirp yes

* Home directory
  Sets the home dir to a name so it can be injected later on.
  #+name: homedir
  #+begin_src emacs-lisp :tangle no :results value
    (getenv "HOME")
  #+end_src
* Hide menu/toolbar/scroolbar
  We don't want to use the mouse anyway :P
  We also want to use as much screen as possible
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+end_src
  
* Straight/use-package setup
  [[https://github.com/raxod502/straight.el][Straight]] let us have a functional package management.
  This section integrates straight and [[https://github.com/jwiegley/use-package][use-package]].
  #+begin_src emacs-lisp
    (setq straight-use-package-by-default t)

    (straight-use-package 'use-package)
  #+end_src

* Miscelaneous
** Disable backup files
   #+begin_src emacs-lisp
     (setq make-backup-files nil)
   #+end_src
** Enable which-key
   [[https://github.com/justbur/emacs-which-key][which-key]] shows the available key bindings in the mini buffer
   #+begin_src emacs-lisp
     (use-package
       which-key
       :config
       (which-key-mode))
   #+end_src
** Markdown/Json/Yaml modes
   Since we all end up editing some markdown/json/yaml every day.
   #+begin_src emacs-lisp
     (use-package
       markdown-mode)

     (use-package
       yaml-mode)

     (use-package
       json-mode)
   #+end_src
** Disable using tabs in indentation
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src
** Edn parsing
   #+begin_src emacs-lisp
     (use-package parseedn)
   #+end_src
* Look and feel
** Theme
   Thank you Batsov. This is [[https://github.com/bbatsov/zenburn-emacs][beautiful]].
   #+begin_src emacs-lisp
     (use-package
       zenburn-theme
       :config
       (load-theme 'zenburn t))
   #+end_src
** Font
   #+begin_src emacs-lisp
     (set-frame-font "Source Code Pro 13" nil t)
   #+end_src
** Winum
   [[https://github.com/deb0ch/emacs-winum][Winum]] decorates windows with a number to make it easier to jump from one window to another.
   #+begin_src emacs-lisp
     (use-package winum
       :config
       (require 'winum)
       (winum-mode))
   #+end_src
** Winner mode
   Allows undo window configurations.
   #+begin_src emacs-lisp
     (winner-mode)
   #+end_src
** Modeline
   Using [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
   The first time this is loaded in a computer, run ~all-the-icons-install-fonts~ to install the proper fonts.
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :custom
       (doom-modeline-height 25)
       :config
       (set-face-attribute 'mode-line nil :family "Source Code Pro" :height 100)
       (set-face-attribute 'mode-line-inactive nil :family "Source Code Prod" :height 100)
       :init
       (doom-modeline-mode 1))
   #+end_src
* Keybindings
** Evil setup
  Modal editing + Emacs rocks and is a little [[https://github.com/emacs-evil/evil][evil]]
  [[https://github.com/emacs-evil/evil-collection][Evil Collection]] spare us the time of setting up evil.
  #+begin_src emacs-lisp
    (use-package
      evil
      :init
      (setq evil-want-keybinding nil)
      (setq evil-want-integration t)
      (setq evil-disable-insert-state-bindings t)
      :config
      (evil-mode 1))

    (use-package
      evil-collection
      :init
      (evil-collection-init)
      :custom
      (evil-collection-setup-minibuffer t))
  #+end_src
** General
  #+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup t)

      (general-create-definer
        my/space-key-def
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (my/space-key-def
        "SPC" 'execute-extended-command
        "'" 'shell))
  #+end_src
** Buffers
   #+begin_src emacs-lisp
     (my/space-key-def
       "b" '(:ignore t :which-key "buffer")
       "bb" 'counsel-switch-buffer
       "bd" 'kill-this-buffer
       "bs" 'scratch)
   #+end_src
** Files
   #+begin_src emacs-lisp
     (my/space-key-def
       "f" '(:ignore t :which-key "file")
       "ff" 'find-file)
   #+end_src
** Font size
   #+begin_src emacs-lisp
     (my/space-key-def
       "t" '(:ignore t :which-key "text")
       "t+" 'text-scale-increase
       "t-" 'text-scale-decrease)
   #+end_src
** Windows
   #+begin_src emacs-lisp
     (my/space-key-def
       "w" '(:ignore t :which-key "window")
       "w/" 'split-window-right
       "w-" 'split-window-below
       "wd" 'delete-window
       "wu" 'winner-undo
       "1" 'winum-select-window-1
       "2" 'winum-select-window-2
       "3" 'winum-select-window-3
       "4" 'winum-select-window-4
       "5" 'winum-select-window-5
       "6" 'winum-select-window-6
       "7" 'winum-select-window-7
       "8" 'winum-select-window-8
       "9" 'winum-select-window-9
       "0" 'winum-select-window-0-or-10)
   #+end_src
** Leader bindings
   #+begin_src emacs-lisp
     (defvar my/leader-key-bindings
       '("e" '(:ignore t :which-key "eval")
         "eb" :eval/buffer
         "ef" :eval/top-level-form
         "ee" :eval/last-sexp
         "ep" :eval/last-sexp-pprint
         "et" :eval/to-portal
         "t" '(:ignore t :which-key "test")
         "tt" :run-test/focused
         "tn" :run-test/buffer
         "s" '(:ignore t :which-key "repl")
         "sq" :repl/quit
         "sx" :repl/refresh
         "'" :repl/start
         "g" '(:ignore t :which-key "jump")
         "gg" :jump/definition
         "gr" :jump/references
         "gd" :jump/doc
         "r" '(:ignore t :which-key "refactor")
         "rr" :refactor/rename))

     (general-create-definer my/leader-def
       :prefix ",")

     (defun my/--find-key-binding (key-expr)
       (if-let ((key-binding (car
                              (seq-find
                               (lambda (pair)
                                 (let ((key (cadr pair)))
                                   (eq key-expr key)))
                               (seq-partition my/leader-key-bindings 2)))))
           key-binding
         (error (format "No such key %s" (symbol-name key-expr)))))

     (defun my/--resolve-binding (key-expr)
       (cond ((keywordp key-expr)
              (my/--find-key-binding key-expr))
             (key-expr)))

     (defun my/--mode-bindings (bindings)
       (apply #'append
              (seq-concatenate
               'list
               (seq-filter
                (lambda (pair)
                  (not (keywordp (cadr pair))))
                (seq-partition my/leader-key-bindings 2))
               (mapcar
                (lambda (pair)
                  (let ((key-expr (car pair))
                        (target (cadr pair)))
                    `(,(my/--resolve-binding key-expr)
                      ,target)))
                (seq-partition bindings 2)))))

     (defmacro my/leader-key-commands (major-mode &rest bindings)
       `(my/leader-def
          :states '(normal visual)
          :keymaps (quote (,(intern (concat (symbol-name major-mode) "-map"))))
          ,@(my/--mode-bindings bindings)))
   #+end_src
* File Management
** Dired
   Better listing switches and enable h/l keybindings to navigate dirs up and down.
   #+begin_src emacs-lisp
     (use-package dired
       :straight nil
       :custom ((dired-listing-switches "-agho --group-directories-first"))
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "h" 'dired-up-directory
         "l" 'dired-find-file))
   #+end_src
   Hide dotfiles.
   #+begin_src emacs-lisp
     (use-package dired-hide-dotfiles
       :hook (dired-mode . dired-hide-dotfiles-mode)
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "H" 'dired-hide-dotfiles-mode))
   #+end_src
   Add colors.
   #+begin_src emacs-lisp
     (use-package diredfl
       :hook (dired-mode . diredfl-mode))
   #+end_src
* Auto Completion
  [[https://github.com/company-mode/company-mode][Company]] to the rescue
  #+begin_src emacs-lisp
    (use-package
      company
      :config
      (global-company-mode)
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))
  #+end_src
* Structural Editing
  Because parenthesis matter, and [[https://www.emacswiki.org/emacs/ParEdit][paredit]] takes control of them.
  [[https://www.emacswiki.org/emacs/ShowParenMode][show-paren-mode]] shows matching parens.
  #+begin_src emacs-lisp
    (show-paren-mode)

    (defmacro user/setup-paredit-for (language)
      `(add-hook
        (quote ,(make-symbol (concat (symbol-name language) "-mode-hook")))
        #'enable-paredit-mode))

    (use-package
      paredit
      :config
      (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))

    (my/space-key-def
      "k" '(:ignore t :which-key "paredit")
      "ks" 'paredit-forward-slurp-sexp
      "kb" 'paredit-forward-barf-sexp
      "kd" 'kill-sexp
      "kr" 'paredit-raise-sexp
      "kp" 'paredit-splice-sexp)
  #+end_src
* Ivy
  [[https://github.com/abo-abo/swiper][Ivy]] provides a completion mechanism to find files, projects and other things.
  #+begin_src emacs-lisp
    (use-package counsel
      :custom
      (ivy-initial-inputs-alist nil)
      :config
      (ivy-mode 1)
      (counsel-mode 1)
      (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
      :bind (:map ivy-minibuffer-map
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)))
    
    (use-package swiper
      :bind
      (:map evil-normal-state-map
            ("/" . swiper)))
    
    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))
  #+end_src
* Git
** Config
   #+begin_src conf-unix :tangle ~/.config/git/config
     [commit]
     gpgSign=true

     [core]
     editor=vim
     excludesfile=~/.config/ignore

     [push]
     default=current

     [user]
     email=rfhayashi@gmail.com
     name=Rui Fernando Hayashi
     signingKey=rfhayashi@gmail.com

     [github]
     user=rfhayashi
   #+end_src
   #+begin_src conf-unix :tangle ~/.config/git/ignore
     .nrepl-port
     .cpcache
     .eastwood
     *.repl
     .clj-kondo/cache
     .clj-kondo/.cache
     .lsp/.cache
   #+end_src
** Magit
   Work with git with a little bit of [[https://magit.vc/][magit]]
   #+begin_src emacs-lisp
     (use-package magit)

     (my/space-key-def
       "gs" 'magit-status)
  #+end_src
* Projectile
  Sets up [[https://github.com/bbatsov/projectile][Projectile]].
  #+begin_src emacs-lisp
    (use-package
     projectile
     :config
     (projectile-mode +1)
     :init
     (when (file-directory-p "~/dev")
       (setq projectile-project-search-path '("~/dev"))))

    (use-package counsel-projectile
      :config
      (counsel-projectile-mode))

    (my/space-key-def
      "p" '(:ignore t :which-key "project")
      "pf" 'projectile-find-file
      "pp" 'projectile-switch-project
      "p'" 'projectile-run-shell
      "/" 'projectile-ag)
  #+end_src
* Yasnippet
  #+begin_src emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
  #+end_src
* Scratch
  [[https://github.com/ffevotte/scratch.el][scratch]] make it easier to create scratch buffers. This is augmented with scratch-buffer-setup function
  by Protesilaos Stavrou ([[https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/][See]]).
  #+begin_src emacs-lisp
    (use-package scratch
      :straight (:host nil :repo "https://codeberg.org/emacs-weirdware/scratch.git")
      :config
      (defun prot/scratch-buffer-setup ()
        "Add contents to `scratch' buffer and name it accordingly."
        (let* ((mode (format "%s" major-mode))
               (string (concat "Scratch buffer for: " mode "\n\n")))
          (when scratch-buffer
            (save-excursion
              (insert string)
              (goto-char (point-min))
              (comment-region (point-at-bol) (point-at-eol)))
            (forward-line 2))
          (rename-buffer (concat "*Scratch for " mode "*") t)))
      (add-hook 'scratch-create-buffer-hook 'prot/scratch-buffer-setup))
  #+end_src
* Languages
** Emacs Lisp
   #+begin_src emacs-lisp
     (my/leader-key-commands
      emacs-lisp-mode
      :eval/buffer 'eval-buffer
      :eval/top-level-form 'eval-defun
      :eval/last-sexp 'eval-last-sexp
      :eval/last-sexp-pprint 'eval-print-last-sexp)
   #+end_src
   
** Clojure
   Setup for working with clojure. Sets up [[https://github.com/clojure-emacs/cider][cider]] and [[https://github.com/snoe/clojure-lsp][clojure lsp]].
*** Dotfiles
   #+begin_src clojure :tangle ~/.clojure/injections/deps.edn
     {}
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/injections/src/portal.clj
     (ns portal
       (:refer-clojure :exclude [send])
       (:require [portal.api :as portal]))
     
     (defonce portal* (atom nil))
     
     (defn instance []
       (reset! portal* (portal/open @portal*))
       @portal*)
     
     (defn send [v]
       (reset! (instance) v))
     
     (defn mkdown [v]
       (with-meta
         [:portal.viewer/markdown v]
         {:portal.viewer/default :portal.viewer/hiccup}))
     
     (defn fetch []
       @(instance))
     
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/injections/src/tap.clj
     (ns tap
       (:refer-clojure :exclude [>]))

     (defn m [message v]
       (tap> {:message message
              :tap v})
       v)

     (defn >-reader [form]
       `(let [t# ~form]
          (tap> t#)
          t#))

     (defmacro > [form]
       (>-reader form))

     (defn d-reader [form]
       `(let [t# ~form]
          (tap> {:code (pr-str (quote ~form))
                 :tap t#})
          t#))

     (defmacro d [form]
       (d-reader form))
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/injections/src/data_readers.clj
     {tap tap/>-reader
      tapd tap/d-reader}
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/injections/src/user.clj
     (ns user
       (:require [tap]
                 [portal]))

     (portal.api/tap)
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/deps.edn :noweb yes
     {:aliases
     
      {; Linters
       :cljfmt {:deps {cljfmt/cljfmt {:mvn/version "0.6.4"}}
                :main-opts ["-m" "cljfmt.main"]}
       :nsorg {:deps {nsorg-cli/nsorg-cli {:mvn/version "0.3.1"}}
               :main-opts ["-m" "nsorg.cli"]}
       :outdated {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
                  :main-opts ["-m" "depot.outdated.main"]}
     
       :oz {:extra-deps {metasoarous/oz {:mvn/version "1.6.0-alpha6"}}}
       :portal {:extra-deps {djblue/portal {:mvn/version "0.29.1"}}}
       :injections {:extra-deps {my/tap {:local/root "<<homedir()>>/.clojure/injections"}}}}}
   #+end_src

   #+begin_src clojure :tangle ~/.clojure/injections/project.clj
     (defproject my/tap "0.0.1-SNAPSHOT")
   #+end_src

   To use tap with leiningen, execute this block manually.
   #+begin_src bash :tangle no :noweb yes
     cd <<homedir()>>/.clojure/injections
     lein install
   #+end_src

   #+begin_src clojure :tangle ~/.lein/profiles.clj
     {:user
      {:dependencies        [[my/tap "0.0.1-SNAPSHOT"]
                             [djblue/portal "0.29.1"]]
       :injections          [(require 'tap)
                             (require 'portal)
                             (portal.api/tap)]}}
   #+end_src

*** Emacs Setup
   #+begin_src emacs-lisp
     (defun my/cider-test-run-focused-test ()
       "Run test around point"
       (interactive)
       (cider-load-buffer)
       (cider-test-run-test))

     (defun my/cider-test-run-ns-tests ()
       "Run namespace test"
       (interactive)
       (cider-load-buffer)
       (cider-test-run-ns-tests nil))

     (defun my/portal-cider-inspect-last-result ()
       (interactive)
       (let ((repl (cider-current-repl)))
         (nrepl-send-sync-request `("op" "eval" "code" "(portal/send *1)") repl)))

     (defun my/portal-cider-open ()
       (interactive)
       (let ((repl (cider-current-repl)))
         (nrepl-send-sync-request `("op" "eval" "code" "(portal/instance)") repl)))

     (defun my/clojure-project-nix-packages (project-type)
       (pcase project-type
         ('clojure-cli "clojure")
         ('lein "leiningen")))

     (use-package clojure-mode
       :config
       (add-hook 'clojure-mode-hook #'enable-paredit-mode))

     (use-package cider
       :config
       (setq cider-save-file-on-load t)
       (setq cider-repl-pop-to-buffer-on-connect nil)
       (setq cider-test-defining-forms '("deftest" "defspec" "defflow" "defflow-with-context"))
       (setq org-babel-clojure-backend 'cider)
       (setq clojure-toplevel-inside-comment-form t)
       (setq cider-clojure-cli-global-options "-J-XX:-OmitStackTraceInFastThrow")
       (setq cider-clojure-cli-global-options "-A:portal -A:injections")
       ; make sure we're using a http-kit version that is compatible with portal
       (cider-add-to-alist 'cider-jack-in-dependencies "http-kit/http-kit" "2.5.3")
       (my/leader-key-commands
        clojure-mode
        :eval/buffer 'cider-eval-buffer
        :eval/top-level-form 'cider-eval-defun-at-point
        :eval/last-sexp 'cider-eval-last-sexp
        :eval/last-sexp-pprint 'cider-eval-print-last-sexp
        :run-test/focused 'my/cider-test-run-focused-test
        :run-test/buffer 'my/cider-test-run-ns-tests
        :repl/quit 'cider-quit
        :repl/refresh 'cider-refresh
        :repl/start 'cider-jack-in
        :jump/definition 'lsp-find-definition
        :jump/references 'lsp-find-references
        :jump/doc 'cider-doc
        :refactor/rename 'lsp-rename)
       (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
       (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion))

     (use-package lsp-mode
       :config
       (dolist (m '(clojure-mode
                    clojurec-mode
                    clojurescript-mode
                    clojurex-mode))
         (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
       (setq lsp-enable-indentation nil)
       (setq lsp-lens-enable t)
       (add-hook 'clojure-mode-hook #'lsp)
       (add-hook 'clojurec-mode-hook #'lsp)
       (add-hook 'clojurescript-mode-hook #'lsp))

     (use-package clj-refactor
       :config
       (clj-refactor-mode 1))
   #+end_src
   

** Javascript
#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src
* Org mode
** Main
  My [[https://orgmode.org/][org mode]] and [[https://github.com/org-roam/org-roam][org roam]] setup.
  #+begin_src emacs-lisp
    (with-eval-after-load 'org
      (require 'ob-shell)
      (require 'ob-clojure)
      (setq org-ellipsis " ▾")
      (setq org-src-window-setup 'split-window-right)
      (org-babel-lob-ingest (expand-file-name "babel.org" user-emacs-directory))
      (require 'org-tempo)
      (dolist (el '(("el" . "src emacs-lisp")
                    ("clj" . "src clojure")
                    ("bb" . "src clojure :backend babashka")
                    ("bash" . "src bash")
                    ("rkt" . "src racket")))
        (add-to-list 'org-structure-template-alist el))
      (my/leader-key-commands
       org-mode
       :eval/top-level-form 'org-ctrl-c-ctrl-c
       :eval/buffer 'org-babel-execute-buffer
       :eval/to-portal 'my/org-babel-execute-src-block-to-clojure-portal
       :jump/definition 'org-open-at-point
       :repl/start 'my/ob-clojure-cider-jack-in-clj))

    (use-package evil-org
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme)))
      (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))

    (defconst rfh/org-roam-dir "~/dev/org-roam")

    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :config
      (setq org-roam-directory rfh/org-roam-dir)
      (setq org-roam-completion-system 'ivy)
      (add-hook 'after-init-hook 'org-roam-mode)
      (my/space-key-def
        "r" '(:ignore t :which-key "roam")
        "rf" 'org-roam-node-find
        "rr" 'org-roam-dailies-goto-date
        "rt" 'org-roam-dailies-goto-tomorrow))

    (use-package company-org-roam
      :after company
      :straight (:host github :repo "org-roam/company-org-roam")
      :config
      (push 'company-org-roam company-backends))

    (defun my/org-mode-visual-fill ()
      (setq visual-fill-column-width 80)
      (visual-fill-column-mode 1)
      (visual-line-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . my/org-mode-visual-fill))
  #+end_src
** Org Babel + Clojure
   Customizations on top of ob-clojure.
*** Support for deps.edn
    It supports setting deps.edn as a source block. To do that create a clojure source block like:

    #+begin_example
      ,#+name: deps-edn
      ,#+begin_src clojure
      {:deps org.clojure/tools.reader {:mvn/version "1.1.1"}}
      ,#+end_src
    #+end_example

    And add a ~:deps-edn~ attribute to your clojure source block, e.g.:
    #+begin_example
      ,#+begin_src clojure
      ,#+begin_src clojure :deps-edn deps-edn
      ; some clojure code
      ,#+end_src
    #+end_example
   
    To start the repl invoke ~my/ob-clojure-cider-jack-in~ from the source block you want to evaluate.
  
   #+begin_src emacs-lisp
     (use-package a)
     
     (defun my/ob-clojure-deps-block-name ()
       (seq-let [_ _ params] (org-babel-get-src-block-info)
         (a-get params :deps-edn)))
     
     (defun my/ob-clojure-deps-block-body ()
       (when-let ((block-name (my/ob-clojure-deps-block-name)))
         (save-excursion
           (org-babel-goto-named-src-block block-name)
           (seq-let [_ body] (org-babel-get-src-block-info)
             body))))
     
     (defun my/ob-clojure-cider-jack-in-clj ()
       (interactive)
       (when-let ((deps-edn (my/ob-clojure-deps-block-body)))
         (write-region deps-edn nil (concat default-directory "deps.edn")))
       (let ((cider-allow-jack-in-without-project t))
         (cider-jack-in-clj '())))
     
     (defun org-babel-execute:clojure (body params)
       "Execute a block of Clojure code with Babel."
       (let* ((backend (if-let ((backend-s (a-get params :backend)))
                           (intern backend-s)
                         org-babel-clojure-backend))
              (expanded (org-babel-expand-body:clojure body params))
              (result-params (cdr (assq :result-params params)))
              result)
         (unless backend
           (user-error "You need to customize org-babel-clojure-backend"))
         (setq result
               (cond
                ((eq backend 'inf-clojure)
                 (ob-clojure-eval-with-inf-clojure expanded params))
                ((eq backend 'cider)
                 (progn
                   (when (not (cider-current-repl))
                     (error "no repl connected, run my/ob-clojure-cider-jack-in-clj"))
                   (ob-clojure-eval-with-cider expanded params)))
                ((eq backend 'slime)
                 (ob-clojure-eval-with-slime expanded params))))
         (org-babel-result-cond result-params
           result
           (condition-case nil (org-babel-script-escape result)
             (error result)))))
   #+end_src
